version: 2.1

orbs:
  docker: circleci/docker@2.7.1

commands:
  build-and-test:
    description: "Builds and tests a Docker image"
    parameters:
      name-space:
        description: "The namespace of the Docker image to build"
        type: string
      image-name:
        description: "The name of the Docker image to build"
        type: string
      use-buildkit:
        description: "Whether to use BuildKit to build the Docker image"
        type: boolean
        default: true
      extra_build_args:
        description: "The extra build arguments to pass to the Docker image"
        type: string
        default: ""
      extra_test_args:
        description: "The extra test arguments to pass to the Docker image"
        type: string
        default: ""
      image-root:
        description: "The root directory of the Docker image"
        type: string
        default: "images"
    steps:
      - docker/build:
          step-name: "Build image"
          image: << parameters.name-space >>/<< parameters.image-name >>
          path: << parameters.image-root >>/<< parameters.image-name >>/src
          docker-context: << parameters.image-root >>/<< parameters.image-name >>/src
          use-buildkit: << parameters.use-buildkit >>
          tag: cache-$CIRCLE_SHA1
          extra_build_args: << parameters.extra_build_args >>
      - docker/build:
          step-name: "Build test image"
          image: test-<< parameters.image-name >>
          path: ./utils/test
          docker-context: ./utils/test
          use-buildkit: << parameters.use-buildkit >>
          extra_build_args: |
            --output=type=cacheonly
            --build-arg=IMAGE=<< parameters.name-space >>/<< parameters.image-name >>:cache-$CIRCLE_SHA1
            --build-context=test_root=<< parameters.image-root >>/<< parameters.image-name >>/tests
            << parameters.extra_test_args >>

  login-and-push:
    description: "Renames and pushes a Docker image"
    parameters:
      docker-username:
        description: "The username to use when logging into Docker Hub"
        type: string
      docker-password:
        description: "The password to use when logging into Docker Hub"
        type: string
      image-name:
        description: "The name of the Docker image to push"
        type: string
        default: ""
      tag:
        description: "The tag of the Docker image to push"
        type: string
        default: ""
    steps:
      - run:
          name: "Login to Docker Hub"
          command: |
            echo "<< parameters.docker-password >>" | docker login --username "<< parameters.docker-username >>" --password-stdin
      - docker/push:
          image: << parameters.image-name >>
          tag: << parameters.tag >>

jobs:
  image-dev-cuda:
    docker:
      - image: cimg/python:3.11
    parameters:
      cuda_version:
        type: string
        default: "12.4.1"
      os:
        type: string
        default: "ubuntu22.04"
      push:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - build-and-test:
          name-space: org
          image-name: dev-cuda
          extra_build_args: |
            --platform=linux/amd64
            --build-arg=BASE_IMAGE=nvidia/cuda:<< parameters.cuda_version >>-cudnn-devel-<< parameters.os >>
          extra_test_args: |
            --platform=linux/amd64
      - when:
          condition: << parameters.push >>
          steps:
            - run:
                name: "Rename image"
                command: |
                  docker tag org/dev-cuda:cache-$CIRCLE_SHA1 $DOCKER_USER/dev-cuda:<< parameters.cuda_version >>-<< parameters.os >>
            - login-and-push:
                docker-username: $DOCKER_USER
                docker-password: $DOCKER_PASS
                image-name: $DOCKER_USER/dev-cuda
                tag: << parameters.cuda_version >>-<< parameters.os >>

workflows:
  test:
    jobs:
      - image-dev-cuda:
          matrix:
            parameters:
              os:
                - ubuntu22.04
                - ubuntu20.04
  deploy:
    jobs:
      - hold:
          type: approval
      - image-dev-cuda:
          push: true
          requires:
            - hold
          matrix:
            parameters:
              os:
                - ubuntu22.04
                - ubuntu20.04
