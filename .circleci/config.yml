version: 2.1

commands:
  build-image:
    description: "Builds a Docker image"
    parameters:
      image-name:
        description: "The name of the Docker image to build"
        type: string
      tag:
        description: "The tag of the Docker image to build"
        type: string
        default: "latest"
      target:
        description: "The stage of the Docker image to build"
        type: string
        default: ""
      build-args:
        description: "The build arguments to pass to the Docker image"
        type: string
        default: ""
      platform:
        description: "The platform to build the Docker image for"
        type: string
        default: "linux/amd64,linux/arm64"
      output:
        description: "The output of the Docker image build"
        type: string
        default: "type=image,push=false"
      use-remote-cache:
        description: "Use the remote Docker layer cache"
        type: boolean
        default: true
      login:
        description: "Login to Docker Hub"
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: << parameters.use-remote-cache >>

      - when:
          condition: << parameters.login >>
          steps:
            - run:
                name: Set up Docker credentials
                command: echo "$DOCKER_CONFIG" > ~/.docker/config.json

      - run:
          name: Build Docker image
          command: |
            docker buildx build \
              --platform << parameters.platform >> \
              --tag << parameters.image-name >>:<< parameters.tag >> \
              $(if [ -n "<< parameters.target >>" ]; then echo "--target << parameters.target >>"; fi) \
              $(for arg in << parameters.build-args >>; do echo "--build-arg $arg"; done) \
              --output << parameters.output >> \
              ./images/<< parameters.image-name >>/src
  run-test:
    description: "Run tests"
    parameters:
      image-name:
        description: "The name of the Docker image to test"
        type: string
      tag:
        description: "The tag of the Docker image to test"
        type: string
        default: "latest"
      scripts:
        description: "The script to run in the Docker image"
        type: string
        default: "test.sh"
      env-vars:
        description: "The environment variables to set in the Docker image"
        type: string
        default: ""
      load-from:
        description: "Load the Docker image from a tarball"
        type: string
        default: ""
    steps:
      - run:
          name: Run tests
          command: |
            pip install invoke
            if [ -n "<< parameters.load-from >>" ]; then
              docker load -i << parameters.load-from >>
            fi
            inv test << parameters.image-name >>
              --tag << parameters.tag >>
              $(for script in << parameters.scripts >>; do echo "--script $script"; done) \
              $(for env_var in << parameters.env-vars >>; do echo "--env-var $env_var"; done)

jobs:
  test-image-build:
    # Install dependencies and run tests
    docker:
      - image: cimg/python:3.11
    parameters:
      cuda_version:
        type: string
        default: "12.4.1"
      os:
        type: string
        default: "ubuntu22.04"
    steps:
      - checkout
      - build-image:
          image-name: "dev-cuda"
          tag: "<< parameters.cuda_version >>-cudnn-devel-<< parameters.os >>"
          platform: "linux/amd64"
          build-args: "BASE_IMAGE=nvidia/cuda:<< parameters.cuda_version >>-cudnn-devel-<< parameters.os >>"
          output: "type=tar,dest=tmp.tar"
          use-remote-cache: true
      - run-test:
          image-name: "dev-cuda"
          tag: "<< parameters.cuda_version >>-cudnn-devel-<< parameters.os >>"
          load-from: "tmp.tar"

workflows:
  test:
    jobs:
      - test-image-build:
          matrix:
            parameters:
              os:
                - ubuntu22.04
                - ubuntu20.04
    # - deploy:
    #     requires:
    #       - test-python
